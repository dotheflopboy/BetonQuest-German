{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hello world","title":"\ud83d\ude80 Home"},{"location":"Documentation/Events-List/","text":"Events List Cancel quest: cancel This event works in the same way as a quest canceler in the backpack . Running it is equal to the player clicking on the bone. The only argument is a name of a quest canceler, as defined in the cancel section Example cancel wood Chat player message chat This event will send the given message as the player. Therefore, it will look like as if the player did send the message. The instruction string is the command, without leading slash. You can only use %player% as a variable in this event. Additional messages can be defined by separating them with | character. If you want to use a | character in the message use \\| . If a plugin does not work with the sudo / command event you need to use this event. Example sendMSG : \"chat Hello!\" sendMultipleMSGs : \"chat Hi %player%|ban %player%|pardon %player%\" sendPluginCommand : \"chat /someCommand x y z\" Chest Clear: chestclear persistent , static This event removes all items from a chest at specified location. The only argument is a location. Example chestclear 100;200;300;world Chest Give: chestgive persistent , static This works the same as give event, but it puts the items in a chest at specified location. The first argument is a location, the second argument is a list of items, like in give event. If the chest is full, the items will be dropped on the ground. The chest can be any other block with inventory, i.e. a hopper or a dispenser. BetonQuest will log an error to the console when this event is fired but there is no chest at specified location. Example chestgive 100;200;300;world emerald:5,sword Chest Take: chesttake persistent , static This event works the same as take event, but it takes items from a chest at specified location. The instruction string is defined in the same way as in chestgive event. Example chesttake 100;200;300;world emerald:5,sword Clear entities: clear This event removes all specified mobs from the specified area. The first required argument is a list of mobs (taken from here ) separated by commas. Next is location. After that there is the radius around the location (a positive number or a variable). You can also optionally specify name: argument, followed by name which removed mobs must have. You can use marked: argument to remove only mobs marked in spawn event. Example clear ZOMBIE,CREEPER 100;200;300;world 10 name:Monster Compass: compass When you run this event, you can add or remove a compass destination for the player. You may also directly set the player's compass destination as well. When a destination is added the player will be able to select a specified location as a target of his compass. To select the target the player must open his backpack and click on the compass icon. The first argument is add , del or set , and second one is the name of the target, as defined in the compass section. Note that if you set a target the player will not automatically have it added to their choices. The destination must be defined in compass section. You can specify a name for the target in each language or just give a general name, and optionally add a custom item (from items section) to be displayed in the backpack. Example of a compass target: compass : beton : name : en : Target pl : Cel location : 100;200;300;world item : scroll Example compass add beton Command: command persistent , static Runs specified command from the console. The instruction string is the command, without leading slash. You can use variables here, but variables other than %player% won't resolve if the event is fired from delayed folder and the player is offline now. You can define additional commands by separating them with | character. If you want to use a | character in the command use \\| . Looking for run command as player ? Example command kill %player%|ban %player% Conversation: conversation Starts a conversation at location of the player. The only argument is ID of the conversation. This bypasses the conversation permission! Example conversation village_smith Damage player: damage Damages the player by specified amount of damage. The only argument is a number (can have floating point). Example damage 20 Delete Point: deletepoint persistent , static Delete the player points in a specified category. Example deletepoint npc_attitude Door: door persistent , static This event can open and close doors, trapdoors and fence gates. The syntax is exactly the same as in lever event above. Example door 100;200;300;world off Remove Potion Effect: deleffect Removes the specified potion effects from the player. Use any instead of a list of types to remove all potion effects from the player. Example deleffect ABSORPTION,BLINDNESS Potion Effect: effect Adds a specified potion effect to player. First argument is potion type. You can find all available types here . Second is integer defining how long the effect will last in seconds. Third argument, also integer, defines level of the effect (1 means first level). Add a parameter ambient to make potion particles appear more invisible (just like beacon effects). To hide particles add a parameter hidden . To hide the icon for the effect add noicon . Example effect BLINDNESS 30 1 ambient icon Explosion: explosion static Creates an explosion. It can make fire and destroy blocks. You can also define power, so be careful not to blow your server away. Default TNT power is 4, while Wither on creation is 7. First argument can be 0 or 1 and states if explosion will generate fire (like Ghast\u2019s fireball). Second is also 0 or 1 but this defines if block will be destroyed or not. Third argument is the power (float number). At the end (4th attribute) there is location. Example explosion 0 1 4 100;64;-100;survival Folder: folder persistent , static It's something like a container for multiple events. You can use it to clarify your code. It also features optional delay and period measured in seconds (you can use ticks or minutes if you add ticks or minutes argument). It is persistent for events marked as persistent , which means that the events will be fired even after the player logs out. Beware though, all conditions are false when the player is offline (even inverted ones), so those events should not be blocked by any conditions! The only required argument is a list of events separated by commas. There are also three optional arguments: delay: , period: and random: . Delay and Period is a number of seconds. Delay is the time before execution and period is the time between each event. It's optional and leaving it blank is the same as delay:0 or period:0 . Random is the amount of events, that will be randomly chosen to fire. It's optional and leaving it blank or omit it will fire all events. Example folder event1,event2,event3 delay:5 period:5 random:1 Give Items: give Gives the player predefined items. They are specified exactly as in item condition - list separated by commas, every item can have amount separated by colon. Default amount is 1. If the player doesn't have required space in the inventory, the items are dropped on the ground, unless they are quest items. Then they will be put into the backpack. You can also specify notify keyword to display a simple message to the player about receiving items. Example give emerald:5,emerald_block:9 Give journal: givejournal This event simply gives the player his journal. It acts the same way as /j command would. Example givejournal Global point: globalpoint persistent , static This works the same way as the normal point event but instead to manipulating the points for a category of a specific player it manipulates points in a global category. These global categories are player independent, so you could for example add a point to such a global category every time a player does a quest and give some special rewards for the 100th player who does the quest. Example globalpoint global_knownusers 1 Global tag: globaltag persistent , static Works the same way as a normal tag event, but instead of setting a tag for one player it sets it globaly for all players. Example globaltag add global_areNPCsAgressive If else: if This event will check a condition, and based on the outcome it will run the first or second event. The instruction string is if condition event1 else event2 , where condition is a condition ID and event1 and event2 are event IDs. else keyword is mandatory between events for no practical reason. Example if sun rain else sun Journal: journal static Adds or deletes an entry to/from a player's journal. Journal entries have to be defined in the journal section. The first argument is the action to perform, the second one is the name of the entry if required. Changing journal entries will also reload the journal. Possible actions are: - add : Adds a page to the journal. - delete : Deletes a page from the journal. - update : Refreshes the journal. This is especially useful when you need to update the main page. Example journal add quest_started journal delete quest_available journal update Kill: kill Kills the player. Nothing else. Kill Mobs: killmob persistent , static Kills all mobs of given type at the location. First argument is the type of the mob . Next argument is the location. Third argument is the radius around the location, in which the mobs must be to get killed. You can also specify name: argument, followed by the name of the mob which should get killed. All _ characters will be replaced with spaces. If you want to kill only mobs that have been marked using the spawn mob event use marked: argument followed by the keyword. Only mobs that are in loaded chunks can be killed by using this event. Example killmob ZOMBIE 100;200;300;world 40 name:Bolec Language Event: language This event changes player's language to the specified one. There is only one argument, the language name. Example language en Lever: lever persistent , static This event can switch a lever. The first argument is a location and the second one is state: on , off or toggle . Example lever 100;200;300;world toggle Lightning: lightning static Strikes a lightning at given location. The only argument is the location. Example lightning 100;64;-100;survival Notification: notify Displays a notification using the NotifyIO system. Warning All colons ( : ) in the message part of the notification need to be escaped, including those inside variables. One backslash ( \\ ) is required when using no quoting at all ( ... ) or single quotes ( '...' ). Two backslashes are required ( \\\\ ) when using double quotes ( \"...\" ). Examples: eventName: notify Peter:Heya %player%! :arrow_right: eventName: notify Peter{++\\++}:Heya %player%! eventName: {=='==}notify Peter:Heya %player%!{=='==} :arrow_right: eventName: {=='==}notify Peter{++\\++}:Heya %player%!{=='==} eventName: {==\"==}notify Peter:Heya %player%!{==\"==} :arrow_right: eventName: {==\"==}notify Peter{++\\\\++}:Heya %player%!{==\"==} otherEvent: notify You own %math.calc:5% fish! :arrow_right: otherEvent: You own %math.calc{++\\++}:5% fish! Option Description message The message that will be displayed. Supports variables and translations. Required, must be first category Will load all settings from that Notification Category. Can be a comma-seperated list. The first existent category will be used. Optional io Any NotifyIO . Overrides the \"category\" settings. Optional NotifyIO Any setting from the defined notifyIO. Can be used multiple times. Overrides the \"category\" settings. Optional The fallback NotifyIO is chat if no argument other than message is specified. message is the only argument of this event that is not key:value based. You can freely add any text with spaces there. It also allows you to provide multiple translations using a special syntax: example : \"notify {en} ABC {de} DEF\" The value in {} is a language key from messages.yml. Any text after the language key until the next language key belongs to the specified language. There must be a space between the language key and the message. In this example, english users would see ABC and german ones would see DEF . Examples: Check out the documentation about Notify Categories and Notify IO options if you haven't yet. You must understand these two if you want to use the Notify system to it's full extend. #The simplest of all notify events. Just a chat message: customEvent : \"notify Hello %player%!\" #It's the same as this one since 'chat' is the default IO. theSame : \"notify Hello %player%! io:chat\" #This one displays a title and a subtile: myTitle : \"notify This is a title.\\nThis is a subtitle. io:title\" #Plays a sound: mySound : \"notify io:sound sound:x.y.z\" #This one explicitly defines an io (bossbar) and adds one bossbarIO option + one soundIO option: myBar : \"notify This is a custom message. io:bossbar barColor:red sound:block.anvil.use\" #Some events with categories. myEvent1 : \"notify This is a custom message! category:info\" myEvent2 : \"notify This is a custom message! category:firstChoice,secondChoice\" #You can also override category settings: myEvent3 : \"notify Another message! category:info io:advancement frame:challenge\" #Use multiple languages: multilanguage : \"notify {en} Hello english person! {de} Hello german person! {es} Hello spanish person!\" Broadcast: notifyall This events works just like the notify event but shows the notification for all online players. Objective: objective persistent , static Manages the objectives. Syntax is objective <action> name , where <action> can be start / add (one of the two), delete / remove or complete / finish . Name is the name of the objective, as defined in the objectives section. Using this in static contexts only works when removing objectives! Example objective start wood OPsudo: opsudo This event is similar to the sudo event, the only difference is that it will fire a command as the player with temporary OP permissions. Additional commands can be defined by separating them with | character. If you want to use a | character in the message use \\| . Looking for run as normal player ? Looking for console commands ? Example opsudo spawn Party event: party Runs the specified list of events (third argument) for every player in a party. More info about parties in \"Party\" chapter in Reference section. Example party 10 has_tag1,!has_tag2 give_reward Pick random: pickrandom persistent , static Another container for events. It picks one (or multiple) of the given events and runs it. You must specify how likely it is that each event is picked by adding the percentage before the event's id. The event won't break if your total percentages are above 100%. It picks one event from the list by default, but you can add an optional amount: if you want more to be picked. Note that only as many events as specified can be picked and amount:0 will do nothing. There must be two %% before the event's name if variables are used, one is from the variable and the other one from the event's syntax. Example pickrandom 20.5%event1,0.5%event2,79%event3 amount:2 pickrandom %point.factionXP.amount%%event1,0.5%event2,79%event3,1%event4 amount:3 Point: point persistent Gives the player a specified amount of points in a specified category. Amount can be negative if you want to subtract points. You can also use an asterisk to do multiplication (or division, if you use a fraction). First argument after the event name must be a category, and the second one - amount of points to give/take/multiply. This event also supports an optional notify argument that will display information about the change using the notification system. Example point npc_attitude 10 Example point village_reputation *0.75 Run events: run persistent , static This event allows you to specify multiple instructions in one, long instruction. Each instruction must be started with the ^ character (it divides all the instructions). It's not the same as the folder event, because you have to specify the actual instruction, not an event name. It is also fired on the same tick, not on the next one like in folder . Don't use conditions here, it behaves strangely. We will fix this in 2.0. Example run ^tag add beton ^give emerald:5 ^entry add beton ^kill Scoreboard: score This event works in the same way as point event, the only difference is that is uses scoreboards instead of points. You can add, subtract, multiply and divide scores in objectives on the scoreboard. The first argument is the name of the objective, second one is a number. It can be positive for additon, negative for subtraction or prefixed with an asterisk for multiplication. Multiplying by fractions is the same as dividing. Example score kills 1 Set Block: setblock persistent , static Changes the block at the given position. The first argument is a Block Selector , the second a location. Very powerful if used to trigger redstone contraptions. Example setblock REDSTONE_BLOCK 100;200;300;world Spawn Mob: spawn persistent , static Spawns specified amount of mobs of given type at the location. First argument is a location. Next is type of the mob . The last, third argument is integer for amount of mobs to be spawned. You can also specify name: argument, followed by the name of the mob. All _ characters will be replaced with spaces. You can also mark the spawned mob with a keyword using marked: argument. It won't show anywhere, and you can check for only marked mobs in mobkill objective. You can specify armor which the mob will wear and items it will hold with h: (helmet), c: (chestplate), l: (leggings), b: (boots), m: (main hand) and o: (off hand) optional arguments. These take a single item without amount, as defined in the items section. You can also add a list of drops with drops: argument, followed by a list of items with amounts after colons, separated by commas. Example spawn 100;200;300;world SKELETON 5 marked:targets Example spawn 100;200;300;world ZOMBIE name:Bolec 1 h:blue_hat c:red_vest drops:emerald:10,bread:2 Sudo: sudo This event is similar to command event, the only difference is that it will fire a command as the player (often referred to as player commands). Additional commands can be defined by separating them with | character. If you want to use a | character in the message use \\| . Looking for run as op ? Looking for console commands ? Example sudo spawn Tag: tag persistent , static This event adds (or removes) a tag to the player. The first argument after event's name must be add or del . Next goes the tag name. It can't contain spaces (though _ is fine). Additional tags can be added, separated by commas (without spaces). Example tag add quest_started,new_entry Take Items: take Removes items from the player\u2019s inventory, armor slots or backpack. The items itself must be defined in the items section, optionally with an amount after a colon. Which inventory types are checked is defined by the invOrder: option. You can use Backpack , Inventory , Offhand and Armor there. One after another will be checked if multiple types are defined. Note: If the items aren't quest items don't use take event with player options in conversations! The player can drop items before selecting the option and pickup them after the event fires. Validate it on the NPC\u2019s reaction! You can also specify notify keyword to display a simple message to the player about loosing items. Example take emerald:120,sword take nugget:6 notify take wand notify invOrder:Backpack take money:50 invOrder:Backpack,Inventory take armor invOrder:Armor,Offhand,Inventory,Backpack Time: time Sets or adds time. The only argument is time to be set (integer) or time to be added (integer prefixed with +), in 24 hours format. Subtracting time is done by adding more time (if you think of this, it actually makes sense). Minutes can be achieved with floating point. Example time +6 Teleport: teleport Teleports the player to a specified location, with or without head rotation. It will also end the conversation, if the player has one active.The first and only argument must be location. It's a good idea to use yaw and pitch here. Example teleport 123;32;-789;world_the_nether;180;45 Variable: variable This event has only one purpose: Change values that are stored in variable objective variables. The first argument is the ID of the variable objective. The second argument is the name of the variable to set. The third argument is the value to set. Both the name and value can use %...% variables. To delete a variable you can use \"\" . Refer to the variable objective documentation for more information about storing variables. This event will do nothing if the player does not already have a variable objective assigned to them. Example variable CustomVariable MyFirstVariable Goodbye! variable variable_objectiveID name %player% variable other_var_obj desc \"\" Weather: weather Sets weather. The argument is sun , rain or storm . Example weather rain Give experience: experience Gives the specified amount of experience points to the player. You can give whole levels by adding the level argument. Example experience 4 level","title":"\ud83d\udcda Documentation"},{"location":"Documentation/Events-List/#events-list","text":"","title":"Events List"},{"location":"Documentation/Events-List/#cancel-quest-cancel","text":"This event works in the same way as a quest canceler in the backpack . Running it is equal to the player clicking on the bone. The only argument is a name of a quest canceler, as defined in the cancel section Example cancel wood","title":"Cancel quest: cancel"},{"location":"Documentation/Events-List/#chat-player-message-chat","text":"This event will send the given message as the player. Therefore, it will look like as if the player did send the message. The instruction string is the command, without leading slash. You can only use %player% as a variable in this event. Additional messages can be defined by separating them with | character. If you want to use a | character in the message use \\| . If a plugin does not work with the sudo / command event you need to use this event. Example sendMSG : \"chat Hello!\" sendMultipleMSGs : \"chat Hi %player%|ban %player%|pardon %player%\" sendPluginCommand : \"chat /someCommand x y z\"","title":"Chat player message chat"},{"location":"Documentation/Events-List/#chest-clear-chestclear","text":"persistent , static This event removes all items from a chest at specified location. The only argument is a location. Example chestclear 100;200;300;world","title":"Chest Clear: chestclear"},{"location":"Documentation/Events-List/#chest-give-chestgive","text":"persistent , static This works the same as give event, but it puts the items in a chest at specified location. The first argument is a location, the second argument is a list of items, like in give event. If the chest is full, the items will be dropped on the ground. The chest can be any other block with inventory, i.e. a hopper or a dispenser. BetonQuest will log an error to the console when this event is fired but there is no chest at specified location. Example chestgive 100;200;300;world emerald:5,sword","title":"Chest Give: chestgive"},{"location":"Documentation/Events-List/#chest-take-chesttake","text":"persistent , static This event works the same as take event, but it takes items from a chest at specified location. The instruction string is defined in the same way as in chestgive event. Example chesttake 100;200;300;world emerald:5,sword","title":"Chest Take: chesttake"},{"location":"Documentation/Events-List/#clear-entities-clear","text":"This event removes all specified mobs from the specified area. The first required argument is a list of mobs (taken from here ) separated by commas. Next is location. After that there is the radius around the location (a positive number or a variable). You can also optionally specify name: argument, followed by name which removed mobs must have. You can use marked: argument to remove only mobs marked in spawn event. Example clear ZOMBIE,CREEPER 100;200;300;world 10 name:Monster","title":"Clear entities: clear"},{"location":"Documentation/Events-List/#compass-compass","text":"When you run this event, you can add or remove a compass destination for the player. You may also directly set the player's compass destination as well. When a destination is added the player will be able to select a specified location as a target of his compass. To select the target the player must open his backpack and click on the compass icon. The first argument is add , del or set , and second one is the name of the target, as defined in the compass section. Note that if you set a target the player will not automatically have it added to their choices. The destination must be defined in compass section. You can specify a name for the target in each language or just give a general name, and optionally add a custom item (from items section) to be displayed in the backpack. Example of a compass target: compass : beton : name : en : Target pl : Cel location : 100;200;300;world item : scroll Example compass add beton","title":"Compass: compass"},{"location":"Documentation/Events-List/#command-command","text":"persistent , static Runs specified command from the console. The instruction string is the command, without leading slash. You can use variables here, but variables other than %player% won't resolve if the event is fired from delayed folder and the player is offline now. You can define additional commands by separating them with | character. If you want to use a | character in the command use \\| . Looking for run command as player ? Example command kill %player%|ban %player%","title":"Command: command"},{"location":"Documentation/Events-List/#conversation-conversation","text":"Starts a conversation at location of the player. The only argument is ID of the conversation. This bypasses the conversation permission! Example conversation village_smith","title":"Conversation: conversation"},{"location":"Documentation/Events-List/#damage-player-damage","text":"Damages the player by specified amount of damage. The only argument is a number (can have floating point). Example damage 20","title":"Damage player: damage"},{"location":"Documentation/Events-List/#delete-point-deletepoint","text":"persistent , static Delete the player points in a specified category. Example deletepoint npc_attitude","title":"Delete Point: deletepoint"},{"location":"Documentation/Events-List/#door-door","text":"persistent , static This event can open and close doors, trapdoors and fence gates. The syntax is exactly the same as in lever event above. Example door 100;200;300;world off","title":"Door: door"},{"location":"Documentation/Events-List/#remove-potion-effect-deleffect","text":"Removes the specified potion effects from the player. Use any instead of a list of types to remove all potion effects from the player. Example deleffect ABSORPTION,BLINDNESS","title":"Remove Potion Effect: deleffect"},{"location":"Documentation/Events-List/#potion-effect-effect","text":"Adds a specified potion effect to player. First argument is potion type. You can find all available types here . Second is integer defining how long the effect will last in seconds. Third argument, also integer, defines level of the effect (1 means first level). Add a parameter ambient to make potion particles appear more invisible (just like beacon effects). To hide particles add a parameter hidden . To hide the icon for the effect add noicon . Example effect BLINDNESS 30 1 ambient icon","title":"Potion Effect: effect"},{"location":"Documentation/Events-List/#explosion-explosion","text":"static Creates an explosion. It can make fire and destroy blocks. You can also define power, so be careful not to blow your server away. Default TNT power is 4, while Wither on creation is 7. First argument can be 0 or 1 and states if explosion will generate fire (like Ghast\u2019s fireball). Second is also 0 or 1 but this defines if block will be destroyed or not. Third argument is the power (float number). At the end (4th attribute) there is location. Example explosion 0 1 4 100;64;-100;survival","title":"Explosion: explosion"},{"location":"Documentation/Events-List/#folder-folder","text":"persistent , static It's something like a container for multiple events. You can use it to clarify your code. It also features optional delay and period measured in seconds (you can use ticks or minutes if you add ticks or minutes argument). It is persistent for events marked as persistent , which means that the events will be fired even after the player logs out. Beware though, all conditions are false when the player is offline (even inverted ones), so those events should not be blocked by any conditions! The only required argument is a list of events separated by commas. There are also three optional arguments: delay: , period: and random: . Delay and Period is a number of seconds. Delay is the time before execution and period is the time between each event. It's optional and leaving it blank is the same as delay:0 or period:0 . Random is the amount of events, that will be randomly chosen to fire. It's optional and leaving it blank or omit it will fire all events. Example folder event1,event2,event3 delay:5 period:5 random:1","title":"Folder: folder"},{"location":"Documentation/Events-List/#give-items-give","text":"Gives the player predefined items. They are specified exactly as in item condition - list separated by commas, every item can have amount separated by colon. Default amount is 1. If the player doesn't have required space in the inventory, the items are dropped on the ground, unless they are quest items. Then they will be put into the backpack. You can also specify notify keyword to display a simple message to the player about receiving items. Example give emerald:5,emerald_block:9","title":"Give Items: give"},{"location":"Documentation/Events-List/#give-journal-givejournal","text":"This event simply gives the player his journal. It acts the same way as /j command would. Example givejournal","title":"Give journal: givejournal"},{"location":"Documentation/Events-List/#global-point-globalpoint","text":"persistent , static This works the same way as the normal point event but instead to manipulating the points for a category of a specific player it manipulates points in a global category. These global categories are player independent, so you could for example add a point to such a global category every time a player does a quest and give some special rewards for the 100th player who does the quest. Example globalpoint global_knownusers 1","title":"Global point: globalpoint"},{"location":"Documentation/Events-List/#global-tag-globaltag","text":"persistent , static Works the same way as a normal tag event, but instead of setting a tag for one player it sets it globaly for all players. Example globaltag add global_areNPCsAgressive","title":"Global tag: globaltag"},{"location":"Documentation/Events-List/#if-else-if","text":"This event will check a condition, and based on the outcome it will run the first or second event. The instruction string is if condition event1 else event2 , where condition is a condition ID and event1 and event2 are event IDs. else keyword is mandatory between events for no practical reason. Example if sun rain else sun","title":"If else: if"},{"location":"Documentation/Events-List/#journal-journal","text":"static Adds or deletes an entry to/from a player's journal. Journal entries have to be defined in the journal section. The first argument is the action to perform, the second one is the name of the entry if required. Changing journal entries will also reload the journal. Possible actions are: - add : Adds a page to the journal. - delete : Deletes a page from the journal. - update : Refreshes the journal. This is especially useful when you need to update the main page. Example journal add quest_started journal delete quest_available journal update","title":"Journal: journal"},{"location":"Documentation/Events-List/#kill-kill","text":"Kills the player. Nothing else.","title":"Kill: kill"},{"location":"Documentation/Events-List/#kill-mobs-killmob","text":"persistent , static Kills all mobs of given type at the location. First argument is the type of the mob . Next argument is the location. Third argument is the radius around the location, in which the mobs must be to get killed. You can also specify name: argument, followed by the name of the mob which should get killed. All _ characters will be replaced with spaces. If you want to kill only mobs that have been marked using the spawn mob event use marked: argument followed by the keyword. Only mobs that are in loaded chunks can be killed by using this event. Example killmob ZOMBIE 100;200;300;world 40 name:Bolec","title":"Kill Mobs: killmob"},{"location":"Documentation/Events-List/#language-event-language","text":"This event changes player's language to the specified one. There is only one argument, the language name. Example language en","title":"Language Event: language"},{"location":"Documentation/Events-List/#lever-lever","text":"persistent , static This event can switch a lever. The first argument is a location and the second one is state: on , off or toggle . Example lever 100;200;300;world toggle","title":"Lever: lever"},{"location":"Documentation/Events-List/#lightning-lightning","text":"static Strikes a lightning at given location. The only argument is the location. Example lightning 100;64;-100;survival","title":"Lightning: lightning"},{"location":"Documentation/Events-List/#notification-notify","text":"Displays a notification using the NotifyIO system. Warning All colons ( : ) in the message part of the notification need to be escaped, including those inside variables. One backslash ( \\ ) is required when using no quoting at all ( ... ) or single quotes ( '...' ). Two backslashes are required ( \\\\ ) when using double quotes ( \"...\" ). Examples: eventName: notify Peter:Heya %player%! :arrow_right: eventName: notify Peter{++\\++}:Heya %player%! eventName: {=='==}notify Peter:Heya %player%!{=='==} :arrow_right: eventName: {=='==}notify Peter{++\\++}:Heya %player%!{=='==} eventName: {==\"==}notify Peter:Heya %player%!{==\"==} :arrow_right: eventName: {==\"==}notify Peter{++\\\\++}:Heya %player%!{==\"==} otherEvent: notify You own %math.calc:5% fish! :arrow_right: otherEvent: You own %math.calc{++\\++}:5% fish! Option Description message The message that will be displayed. Supports variables and translations. Required, must be first category Will load all settings from that Notification Category. Can be a comma-seperated list. The first existent category will be used. Optional io Any NotifyIO . Overrides the \"category\" settings. Optional NotifyIO Any setting from the defined notifyIO. Can be used multiple times. Overrides the \"category\" settings. Optional The fallback NotifyIO is chat if no argument other than message is specified. message is the only argument of this event that is not key:value based. You can freely add any text with spaces there. It also allows you to provide multiple translations using a special syntax: example : \"notify {en} ABC {de} DEF\" The value in {} is a language key from messages.yml. Any text after the language key until the next language key belongs to the specified language. There must be a space between the language key and the message. In this example, english users would see ABC and german ones would see DEF .","title":"Notification: notify"},{"location":"Documentation/Events-List/#broadcast-notifyall","text":"This events works just like the notify event but shows the notification for all online players.","title":"Broadcast: notifyall"},{"location":"Documentation/Events-List/#objective-objective","text":"persistent , static Manages the objectives. Syntax is objective <action> name , where <action> can be start / add (one of the two), delete / remove or complete / finish . Name is the name of the objective, as defined in the objectives section. Using this in static contexts only works when removing objectives! Example objective start wood","title":"Objective: objective"},{"location":"Documentation/Events-List/#opsudo-opsudo","text":"This event is similar to the sudo event, the only difference is that it will fire a command as the player with temporary OP permissions. Additional commands can be defined by separating them with | character. If you want to use a | character in the message use \\| . Looking for run as normal player ? Looking for console commands ? Example opsudo spawn","title":"OPsudo: opsudo"},{"location":"Documentation/Events-List/#party-event-party","text":"Runs the specified list of events (third argument) for every player in a party. More info about parties in \"Party\" chapter in Reference section. Example party 10 has_tag1,!has_tag2 give_reward","title":"Party event: party"},{"location":"Documentation/Events-List/#pick-random-pickrandom","text":"persistent , static Another container for events. It picks one (or multiple) of the given events and runs it. You must specify how likely it is that each event is picked by adding the percentage before the event's id. The event won't break if your total percentages are above 100%. It picks one event from the list by default, but you can add an optional amount: if you want more to be picked. Note that only as many events as specified can be picked and amount:0 will do nothing. There must be two %% before the event's name if variables are used, one is from the variable and the other one from the event's syntax. Example pickrandom 20.5%event1,0.5%event2,79%event3 amount:2 pickrandom %point.factionXP.amount%%event1,0.5%event2,79%event3,1%event4 amount:3","title":"Pick random: pickrandom"},{"location":"Documentation/Events-List/#point-point","text":"persistent Gives the player a specified amount of points in a specified category. Amount can be negative if you want to subtract points. You can also use an asterisk to do multiplication (or division, if you use a fraction). First argument after the event name must be a category, and the second one - amount of points to give/take/multiply. This event also supports an optional notify argument that will display information about the change using the notification system. Example point npc_attitude 10 Example point village_reputation *0.75","title":"Point: point"},{"location":"Documentation/Events-List/#run-events-run","text":"persistent , static This event allows you to specify multiple instructions in one, long instruction. Each instruction must be started with the ^ character (it divides all the instructions). It's not the same as the folder event, because you have to specify the actual instruction, not an event name. It is also fired on the same tick, not on the next one like in folder . Don't use conditions here, it behaves strangely. We will fix this in 2.0. Example run ^tag add beton ^give emerald:5 ^entry add beton ^kill","title":"Run events: run"},{"location":"Documentation/Events-List/#scoreboard-score","text":"This event works in the same way as point event, the only difference is that is uses scoreboards instead of points. You can add, subtract, multiply and divide scores in objectives on the scoreboard. The first argument is the name of the objective, second one is a number. It can be positive for additon, negative for subtraction or prefixed with an asterisk for multiplication. Multiplying by fractions is the same as dividing. Example score kills 1","title":"Scoreboard: score"},{"location":"Documentation/Events-List/#set-block-setblock","text":"persistent , static Changes the block at the given position. The first argument is a Block Selector , the second a location. Very powerful if used to trigger redstone contraptions. Example setblock REDSTONE_BLOCK 100;200;300;world","title":"Set Block: setblock"},{"location":"Documentation/Events-List/#spawn-mob-spawn","text":"persistent , static Spawns specified amount of mobs of given type at the location. First argument is a location. Next is type of the mob . The last, third argument is integer for amount of mobs to be spawned. You can also specify name: argument, followed by the name of the mob. All _ characters will be replaced with spaces. You can also mark the spawned mob with a keyword using marked: argument. It won't show anywhere, and you can check for only marked mobs in mobkill objective. You can specify armor which the mob will wear and items it will hold with h: (helmet), c: (chestplate), l: (leggings), b: (boots), m: (main hand) and o: (off hand) optional arguments. These take a single item without amount, as defined in the items section. You can also add a list of drops with drops: argument, followed by a list of items with amounts after colons, separated by commas. Example spawn 100;200;300;world SKELETON 5 marked:targets Example spawn 100;200;300;world ZOMBIE name:Bolec 1 h:blue_hat c:red_vest drops:emerald:10,bread:2","title":"Spawn Mob: spawn"},{"location":"Documentation/Events-List/#sudo-sudo","text":"This event is similar to command event, the only difference is that it will fire a command as the player (often referred to as player commands). Additional commands can be defined by separating them with | character. If you want to use a | character in the message use \\| . Looking for run as op ? Looking for console commands ? Example sudo spawn","title":"Sudo: sudo"},{"location":"Documentation/Events-List/#tag-tag","text":"persistent , static This event adds (or removes) a tag to the player. The first argument after event's name must be add or del . Next goes the tag name. It can't contain spaces (though _ is fine). Additional tags can be added, separated by commas (without spaces). Example tag add quest_started,new_entry","title":"Tag: tag"},{"location":"Documentation/Events-List/#take-items-take","text":"Removes items from the player\u2019s inventory, armor slots or backpack. The items itself must be defined in the items section, optionally with an amount after a colon. Which inventory types are checked is defined by the invOrder: option. You can use Backpack , Inventory , Offhand and Armor there. One after another will be checked if multiple types are defined. Note: If the items aren't quest items don't use take event with player options in conversations! The player can drop items before selecting the option and pickup them after the event fires. Validate it on the NPC\u2019s reaction! You can also specify notify keyword to display a simple message to the player about loosing items. Example take emerald:120,sword take nugget:6 notify take wand notify invOrder:Backpack take money:50 invOrder:Backpack,Inventory take armor invOrder:Armor,Offhand,Inventory,Backpack","title":"Take Items: take"},{"location":"Documentation/Events-List/#time-time","text":"Sets or adds time. The only argument is time to be set (integer) or time to be added (integer prefixed with +), in 24 hours format. Subtracting time is done by adding more time (if you think of this, it actually makes sense). Minutes can be achieved with floating point. Example time +6","title":"Time: time"},{"location":"Documentation/Events-List/#teleport-teleport","text":"Teleports the player to a specified location, with or without head rotation. It will also end the conversation, if the player has one active.The first and only argument must be location. It's a good idea to use yaw and pitch here. Example teleport 123;32;-789;world_the_nether;180;45","title":"Teleport: teleport"},{"location":"Documentation/Events-List/#variable-variable","text":"This event has only one purpose: Change values that are stored in variable objective variables. The first argument is the ID of the variable objective. The second argument is the name of the variable to set. The third argument is the value to set. Both the name and value can use %...% variables. To delete a variable you can use \"\" . Refer to the variable objective documentation for more information about storing variables. This event will do nothing if the player does not already have a variable objective assigned to them. Example variable CustomVariable MyFirstVariable Goodbye! variable variable_objectiveID name %player% variable other_var_obj desc \"\"","title":"Variable: variable"},{"location":"Documentation/Events-List/#weather-weather","text":"Sets weather. The argument is sun , rain or storm . Example weather rain","title":"Weather: weather"},{"location":"Documentation/Events-List/#give-experience-experience","text":"Gives the specified amount of experience points to the player. You can give whole levels by adding the level argument. Example experience 4 level","title":"Give experience: experience"}]}